input {
  # Lecture des logs d'accès de Nginx
  file {
    path => "/var/log/nginx/access.log"  # Spécifie le chemin du fichier de logs d'accès
    start_position => "beginning"
    sincedb_path => "/dev/null"  # Ne pas conserver l'état des logs
    type => "nginx_access"  # Définit un type pour les logs d'accès
  }
  
  # Lecture des logs du système (par exemple, syslog)
  file {
    path => "/var/log/syslog"  # Change cela selon le type de logs que tu veux
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "system_log"  # Définit un type pour les logs système
  }

  # Collecte des informations sur la mémoire et le CPU
  exec {
    command => "vmstat 1 5"  # Commande pour récupérer les stats de mémoire et CPU
    interval => 10
    type => "system_metrics"  # Type pour distinguer ces logs
  }
}

filter {
  # Traitement spécifique pour les logs d'accès Nginx
  if [type] == "nginx_access" {
    grok {
      match => { "message" => "%{IPORHOST:client} - %{USER:ident} \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{NOTSPACE:request} HTTP/%{NUMBER:version}\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) \"%{DATA:referrer}\" \"%{DATA:user_agent}\"" }
    }

    # Ajouter le chemin de la requête comme champ
    mutate {
      add_field => { "request_path" => "%{[request]}" }
      add_field => { "custom_timestamp" => "%{timestamp}" }  # Champ personnalisé pour l'horodatage
    }
  }
  
  # Si nécessaire, ajoute d'autres filtres ici pour les logs système ou d'autres types de logs
  if [type] == "system_log" {
    # Exemple de traitement pour les logs système, si nécessaire
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }  # Par exemple, pour un format de log Apache
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"  # Change le nom de l'index si nécessaire
  }
  stdout { codec => rubydebug }  # Affiche les logs traités dans la console pour débogage
}

